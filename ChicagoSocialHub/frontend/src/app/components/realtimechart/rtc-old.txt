import { Component, ViewEncapsulation, OnInit } from '@angular/core';
import { Router, ActivatedRoute, Params } from '@angular/router';
import { HttpClient } from '@angular/common/http';
import * as c3 from 'c3';
import * as d3 from 'd3-selection';
import * as d3Scale from 'd3-scale';
import * as d3Shape from 'd3-shape';
import * as d3Array from 'd3-array';
import * as d3Axis from 'd3-axis';
import { Station } from '../../station';
import { PlacesService } from '../../places.service';
import { MatMenuModule } from '@angular/material/menu';

@Component({
    selector: 'app-realtimechart',
    templateUrl: './realtimechart.component.html',
    styleUrls: ['./realtimechart.component.css']
})
export class RealtimechartComponent implements OnInit {
    title = 'SMA';
    public StationName;
    constructor(private PlacesService: PlacesService, private router: Router, private http: HttpClient, private activatedRoute: ActivatedRoute) {
        this.activatedRoute.queryParams.subscribe((params: Params) => {
            console.log(params);
            this.hours = params.hours;
            this.StationName = params.stationName;
            console.log(this.StationName);
        });
    }
    private margin = { top: 20, right: 20, bottom: 30, left: 100 };
    private width: number;
    private height: number;
    stations: Station[] = [];
    private x: any;
    private y: any;
    private svg: any;
    private line: d3Shape.Line<[number, number]>;
    private sma_red: d3Shape.Line<[number, number]>;
    private sma_blue: d3Shape.Line<[number, number]>;
    private g: any;
    private hours: any = 1;
    log_1hour: any = [];
    smaData_1hour: any = [];
    log_24hour: any = [];
    smaData_24hour: any = [];

    ngOnInit() {
        this.linechart();
        setInterval(() => { this.linechart(); }, 180000)
    }

    //Sending hours to placeServices
    show_line_chart(hours) {
        this.hours = hours;       
        this.PlacesService.logstash_divvy_data(this.StationName, this.hours).subscribe(() => {
            console.log("Yaaay Works")
            d3.selectAll("svg > *").remove();
            this.linechart();
            console.log("linechart ka function katam hua");

        });

    }

    // Calculate Average for SMA's
    calculateAverage(arr) {
        var sum = 0;
        for (var i = 0; i < arr.length; i++) {
            sum += arr[i].availableDocks
        }
        return { lastCommunicationTime: arr[arr.length - 1].lastCommunicationTime, availableDocks_avg: sum / arr.length }
    }


    linechart() {
        //this.PlacesService.logstash_divvy_data(this.StationName, this.hours).subscribe(() => {
            console.log("linechart-hours", this.hours);
            this.PlacesService
                .getLogstash_divvy_data()
                .subscribe((data: Station[]) => {
                    this.stations = data;
                    this.createchart();
                    //this.chart_24();
                });
        //})
    }


    // chart_24() {
    //     this.PlacesService.logstash_divvy_data(this.StationName, 24).subscribe(() => {
    //         this.PlacesService
    //             .getLogstash_divvy_data()
    //             .subscribe((data: Station[]) => {
    //                 this.log_24hour = [];
    //                 //this.stations = data;
    //                 for (var i = 0; i < data.length; i++) {
    //                     this.log_24hour.push({ lastCommunicationTime: new Date(data[i].lastCommunicationTime.toString()), availableBikes: +data[i].availableBikes, availableDocks: +data[i].availableDocks, totalDocks: +data[i].totalDocks })
    //                 }
    //                 console.log("calcAvg-24", this.calculateAverage(this.log_24hour));
    //                 this.smaData_24hour.push(this.calculateAverage(this.log_24hour));
    //                 console.log("Data-24", this.smaData_24hour);
    //                 this.createchart();
    //                 this.chart_1()

    //             });
    //     });
    // }

    // chart_1() {
    //     this.PlacesService.logstash_divvy_data(this.StationName, 1).subscribe(() => {
    //         this.PlacesService
    //             .getLogstash_divvy_data()
    //             .subscribe((data: Station[]) => {
    //                 this.log_1hour = []
    //                 //this.stations = data;
    //                 for (var i = 0; i < data.length; i++) {
    //                     this.log_1hour.push({ lastCommunicationTime: new Date(data[i].lastCommunicationTime.toString()), availableBikes: +data[i].availableBikes, availableDocks: +data[i].availableDocks, totalDocks: +data[i].totalDocks })
    //                 }
    //                 console.log("calcAvg-1", this.calculateAverage(this.log_1hour));
    //                 this.smaData_1hour.push(this.calculateAverage(this.log_1hour));
    //                 console.log("Data-1", this.smaData_1hour);
    //                 this.createchart();
    //             });
    //     })
    // }//end of station selected


    createchart() {
        d3.selectAll("svg > *").remove();

        this.svg = d3.select('svg');
        this.width = +this.svg.attr('width') - this.margin.left - this.margin.right;
        this.height = +this.svg.attr('height') - this.margin.top - this.margin.bottom;
        this.g = this.svg.append('g')
            .attr('transform', 'translate(' + this.margin.left + ',' + this.margin.top + ')');
        this.x = d3Scale.scaleTime().rangeRound([0, this.width]);
        this.y = d3Scale.scaleLinear().rangeRound([this.height, 0]);
        console.log("-------------------------------------");
        console.log(this.stations.length)
        console.log("1111111", d3Array.max(this.stations, (d) => +d.totalDocks))
        console.log("-------------------------------------");
        this.x.domain(d3Array.extent(this.stations, (d) => new Date(d.lastCommunicationTime.toString())));
        this.y.domain([0, d3Array.max(this.stations, (d) => d.totalDocks)]);

        this.g.append('g')
            .attr('class', 'x axis')
            .attr('transform', 'translate(0,' + this.height + ')')
            .text('Time')
            .call(d3Axis.axisBottom(this.x));
        this.g.append('g')
            .attr('class', 'y axis')
            .call(d3Axis.axisLeft(this.y))
            .append('text')
            .attr('class', 'axis-title')
            .attr('transform', 'rotate(-90)')
            .attr('y', 6)
            .attr('dy', '0.71em')
            .attr('fill', '#000')
            .text('totalDocks');

        //line chart
        this.line = d3Shape.line()
            .x((d: any) => this.x(new Date(d.lastCommunicationTime.toString())))//d.loggingtime
            .y((d: any) => this.y(d.availableDocks));


        this.g.append("path")
            .datum(this.stations)
            .attr("fill", "none")
            .attr("class", "line")
            .attr("stroke", "green")
            .attr("stroke-width", 1.5)
            .attr("stroke-linejoin", "round")
            .attr("stroke-linecap", "round")
            .attr("d", this.line);


        //30-past 1 hr
        // this.sma_blue = d3Shape.line()
        //     .x((d: any) => this.x(d.lastCommunicationTime))//d.loggingtime
        //     .y((d: any) => this.y(d.availableDocks_avg));
        // this.g.append("path")
        //     .datum(this.smaData_1hour)
        //     .attr("fill", "none")
        //     .attr("class", "sma_blue")
        //     .attr("stroke", "steelblue")
        //     .attr("stroke-width", 10)
        //     .attr("stroke-linejoin", "round")
        //     .attr("stroke-linecap", "round")
        //     .attr("d", this.sma_blue);
        // //720-past 24 hr       
        // this.sma_red = d3Shape.line()
        //     .x((d: any) => this.x(d.lastCommunicationTime))//d.loggingtime
        //     .y((d: any) => this.y(d.availableDocks_avg));

        // this.g.append("path")
        //     .datum(this.smaData_24hour)
        //     .attr("fill", "none")
        //     .attr("class", "sma_red")
        //     .attr("stroke", "Red")
        //     .attr("stroke-width", 10)
        //     .attr("stroke-linejoin", "round")
        //     .attr("stroke-linecap", "round")
        //     .attr("d", this.sma_red);


        console.log("Reached Here");


    }
}
